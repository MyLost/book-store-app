plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.2'
    id 'eclipse-wtp'
    id 'eclipse'
}

eclipse {
	project {
	  name = "book-store-java-backend"
	}
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

group = 'org.npd21tech'
version = '0.0.1'

compileJava {
   options.encoding = "UTF-8"
   options.compilerArgs << "-parameters"
}

compileTestJava {
	options.encoding = "UTF-8"
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.session:spring-session-core'

	compileOnly 'org.projectlombok:lombok'

	runtimeOnly 'com.mysql:mysql-connector-j'

	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	implementation group: "org.mapstruct", name: "mapstruct", version: '1.6.0.Beta1'
	annotationProcessor group: "org.mapstruct", name: "mapstruct-processor", version: '1.6.0.Beta1'

	implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.3.0'

	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.12.3'

	implementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: '8.0.1.Final'


	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.12.3'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.12.3'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
